Timer unit: 1e-07 s

Total time: 1.55862 s
File: C:\Users\gupta\Documents\GitHub\SAGA\TSP19simpack\GAutils\objects.py
Function: get_newfit_error at line 181

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   181                                               @profile    
   182                                               def get_newfit_error(cls, sensors, rnew, dnew, gnew, sidnew):
   183                                                   # Reports geometry fitting error for given R,D pair
   184      5470    1678090.0    306.8     10.8          rn = np.append(cls.r, rnew)
   185      5470    1365035.0    249.5      8.8          dn = np.append(cls.d, dnew)
   186                                                   # rn = np.hstack((cls.r, rnew))
   187                                                   # dn = np.hstack((cls.d, dnew))
   188                                                   # gn = np.hstack((cls.g, gnew))
   189      5470     195385.0     35.7      1.3          Me = rn*dn
   190      5470     126483.0     23.1      0.8          Me2 = rn*rn
   191      5470     101868.0     18.6      0.7          Ns = len(rn)
   192      5470    1240981.0    226.9      8.0          sindx_new = np.append(cls.sindx,sidnew)
   193      5470     264969.0     48.4      1.7          keyval = tuple(sindx_new)
   194      5470     601689.0    110.0      3.9          L = np.array([sensors[si].x for si in sindx_new])
   195      5470     151350.0     27.7      1.0          if keyval in cls.CRBdict:
   196      5435     119585.0     22.0      0.8              CRB=cls.CRBdict[keyval]
   197                                                   else:
   198        35      20036.0    572.5      0.1              CRB = np.array([sensors[si].getnominalCRB() for i, si in enumerate(sindx_new)]) # Using nominal
   199        35       1125.0     32.1      0.0              cls.CRBdict[keyval] = CRB
   200                                           #        CRB = np.array([sensors[si].getCRB()/(abs(gn[i])**2) for i, si in enumerate(sindx_new)]) # Using est. gain
   201                                                   # Get constants
   202      5470      99026.0     18.1      0.6          Z = cls.Zdict[Ns-2]
   203      5470      96040.0     17.6      0.6          Wi = cls.Widict[Ns-2]
   204                                                   
   205      5470     111148.0     20.3      0.7          if keyval in cls.udict:
   206      5435     105980.0     19.5      0.7              u_vec=cls.udict[keyval]
   207                                                   else:
   208        35      22186.0    633.9      0.1              ZWZ = np.linalg.multi_dot([Z.T, Wi, Z])
   209                                                       # Main estimator
   210        35      30945.0    884.1      0.2              u_vec = ZWZ @ L/np.linalg.multi_dot([L.T, ZWZ, L])
   211        35       1049.0     30.0      0.0              cls.udict[keyval] = u_vec
   212                                                   # rd fitting
   213      5470     455846.0     83.3      2.9          v_hat = -Me @ u_vec # v_x estimate
   214      5470    2152353.0    393.5     13.8          M1var = (np.sum( CRB * np.array([dn**2, rn**2]).T,1) 
   215      5470    1061450.0    194.0      6.8          + np.prod(CRB,1) )
   216                                           #        lb_vx_std = np.sqrt(M1var @ (u_vec**2)) # Std. dev in estimating vx
   217                                                   # Fitting Error compuation (For each target)
   218      5470     849106.0    155.2      5.4          N_mat = Me @ Z.T + (v_hat *L) @(Z.T) # eta
   219      5470     229760.0     42.0      1.5          V_mat = N_mat @ Wi  # Optimal dual var.
   220                                                   
   221                                                   # r2 fitting
   222      5470     572632.0    104.7      3.7          x_hat = -(Me2 - ( L**2 )) @ u_vec/2
   223      5470     932714.0    170.5      6.0          M2var = (4*CRB[:,0] * np.array( rn**2) + CRB[:,0]**2)# Ignoring higher order terms
   224                                           #        lb_x_std = np.sqrt(M2var @ (u_vec**2)/4) # std. dev in estimating x
   225                                                   # Fitting Error compuation (For each target)
   226      5470    1050569.0    192.1      6.7          N_mat2 = Me2 @ Z.T + 2*x_hat *L @ (Z.T) - ( L*L ) @ Z.T # eta
   227      5470     215148.0     39.3      1.4          U_mat = N_mat2 @ Wi # Optimal dual var.
   228                                           
   229      5470    1340612.0    245.1      8.6          gc = ((cfg.rd_wt[0]*(V_mat@Z/2)**2/M1var + cfg.rd_wt[1]*((U_mat@Z/2)**2)/M2var))
   230      5470     393036.0     71.9      2.5          return sum(gc)

